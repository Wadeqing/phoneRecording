package com.sinocall.phonerecordera.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.sinocall.phonerecordera.dao.FileDownloadBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_DOWNLOAD_BEAN".
*/
public class FileDownloadBeanDao extends AbstractDao<FileDownloadBean, Long> {

    public static final String TABLENAME = "FILE_DOWNLOAD_BEAN";

    /**
     * Properties of entity FileDownloadBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Fid = new Property(0, long.class, "fid", true, "_id");
        public final static Property UrlPath = new Property(1, String.class, "urlPath", false, "URL_PATH");
        public final static Property FilePath = new Property(2, String.class, "filePath", false, "FILE_PATH");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileSize = new Property(4, long.class, "fileSize", false, "FILE_SIZE");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
    }


    public FileDownloadBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FileDownloadBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_DOWNLOAD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: fid
                "\"URL_PATH\" TEXT," + // 1: urlPath
                "\"FILE_PATH\" TEXT," + // 2: filePath
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"FILE_SIZE\" INTEGER NOT NULL ," + // 4: fileSize
                "\"CREATE_TIME\" TEXT);"); // 5: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_DOWNLOAD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileDownloadBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFid());
 
        String urlPath = entity.getUrlPath();
        if (urlPath != null) {
            stmt.bindString(2, urlPath);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileDownloadBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFid());
 
        String urlPath = entity.getUrlPath();
        if (urlPath != null) {
            stmt.bindString(2, urlPath);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(3, filePath);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getFileSize());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FileDownloadBean readEntity(Cursor cursor, int offset) {
        FileDownloadBean entity = new FileDownloadBean( //
            cursor.getLong(offset + 0), // fid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // urlPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // filePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getLong(offset + 4), // fileSize
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileDownloadBean entity, int offset) {
        entity.setFid(cursor.getLong(offset + 0));
        entity.setUrlPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFilePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileSize(cursor.getLong(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileDownloadBean entity, long rowId) {
        entity.setFid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileDownloadBean entity) {
        if(entity != null) {
            return entity.getFid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileDownloadBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
